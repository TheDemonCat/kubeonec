{{- if .Values.ones_client.netHasp.create}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "kubeonec.fullname" . }}-nethasp
  namespace: {{ .Values.Namespace }}
data:
  nethasp.ini: |
    [NH_COMMON]
    NH_TCPIP = Enabled
    [NH_TCPIP]
    NH_SERVER_ADDR = {{ .Values.ones_client.netHasp.serverAddres }}
    NH_PORT_NUMBER = 475
    NH_TCPIP_METHOD = UDP
{{- end }}

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "kubeonec.fullname" . }}-odin-conf
  namespace: {{ .Values.Namespace }}
data:
  odin.yaml: |
    app:
    - addr: localhost
      descr: k8s server
      name: onec

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "kubeonec.fullname" . }}-host-add
  namespace: {{ .Values.Namespace }}
data:
  k8s-onec-server-port-add.sh: |
    #!/bin/bash
    set -xe

    TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) 
    CURL_CA_BUNDLE=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt 

    cd /tmp

    if [ -z "${KUBE_NAMESPACE}" ]; then
        rm onec-server.json
        curl --cacert "$CURL_CA_BUNDLE" \
        --header "Authorization: Bearer $TOKEN"  \
        https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT_HTTPS}/api/v1/namespaces/${KUBE_NAMESPACE}/pods?labelSelector=app%3Donec-server >> onec-server.json

        for k in $(jq '.items | keys | .[]'  onec-server.json); do
            value=$(jq -r ".items[$k]"  onec-server.json);
            podName=$(jq -r '.metadata.name' <<< "$value");
            podIP=$(jq -r '.status.podIP' <<< "$value");
            echo "$podIP $podName" >> /etc/hosts
            # printf '%s\t%s\t%s\n' "$name" "$podIP";
        done | column -t -s$'\t'

        rm onec-server.json
    fi
